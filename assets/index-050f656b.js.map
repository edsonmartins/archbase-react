{"version":3,"file":"index-050f656b.js","sources":["../../node_modules/date-fns/esm/formatISO/index.js"],"sourcesContent":["import toDate from \"../toDate/index.js\";\nimport addLeadingZeros from \"../_lib/addLeadingZeros/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name formatISO\n * @category Common Helpers\n * @summary Format the date according to the ISO 8601 standard (https://support.sas.com/documentation/cdl/en/lrdict/64316/HTML/default/viewer.htm#a003169814.htm).\n *\n * @description\n * Return the formatted date string in ISO 8601 format. Options may be passed to control the parts and notations of the date.\n *\n * @param {Date|Number} date - the original date\n * @param {Object} [options] - an object with options.\n * @param {'extended'|'basic'} [options.format='extended'] - if 'basic', hide delimiters between date and time values.\n * @param {'complete'|'date'|'time'} [options.representation='complete'] - format date, time with local time zone, or both.\n * @returns {String} the formatted date string (in local time zone)\n * @throws {TypeError} 1 argument required\n * @throws {RangeError} `date` must not be Invalid Date\n * @throws {RangeError} `options.format` must be 'extended' or 'basic'\n * @throws {RangeError} `options.representation` must be 'date', 'time' or 'complete'\n *\n * @example\n * // Represent 18 September 2019 in ISO 8601 format (local time zone is UTC):\n * const result = formatISO(new Date(2019, 8, 18, 19, 0, 52))\n * //=> '2019-09-18T19:00:52Z'\n *\n * @example\n * // Represent 18 September 2019 in ISO 8601, short format (local time zone is UTC):\n * const result = formatISO(new Date(2019, 8, 18, 19, 0, 52), { format: 'basic' })\n * //=> '20190918T190052'\n *\n * @example\n * // Represent 18 September 2019 in ISO 8601 format, date only:\n * const result = formatISO(new Date(2019, 8, 18, 19, 0, 52), { representation: 'date' })\n * //=> '2019-09-18'\n *\n * @example\n * // Represent 18 September 2019 in ISO 8601 format, time only (local time zone is UTC):\n * const result = formatISO(new Date(2019, 8, 18, 19, 0, 52), { representation: 'time' })\n * //=> '19:00:52Z'\n */\nexport default function formatISO(date, options) {\n  var _options$format, _options$representati;\n  requiredArgs(1, arguments);\n  var originalDate = toDate(date);\n  if (isNaN(originalDate.getTime())) {\n    throw new RangeError('Invalid time value');\n  }\n  var format = String((_options$format = options === null || options === void 0 ? void 0 : options.format) !== null && _options$format !== void 0 ? _options$format : 'extended');\n  var representation = String((_options$representati = options === null || options === void 0 ? void 0 : options.representation) !== null && _options$representati !== void 0 ? _options$representati : 'complete');\n  if (format !== 'extended' && format !== 'basic') {\n    throw new RangeError(\"format must be 'extended' or 'basic'\");\n  }\n  if (representation !== 'date' && representation !== 'time' && representation !== 'complete') {\n    throw new RangeError(\"representation must be 'date', 'time', or 'complete'\");\n  }\n  var result = '';\n  var tzOffset = '';\n  var dateDelimiter = format === 'extended' ? '-' : '';\n  var timeDelimiter = format === 'extended' ? ':' : '';\n\n  // Representation is either 'date' or 'complete'\n  if (representation !== 'time') {\n    var day = addLeadingZeros(originalDate.getDate(), 2);\n    var month = addLeadingZeros(originalDate.getMonth() + 1, 2);\n    var year = addLeadingZeros(originalDate.getFullYear(), 4);\n\n    // yyyyMMdd or yyyy-MM-dd.\n    result = \"\".concat(year).concat(dateDelimiter).concat(month).concat(dateDelimiter).concat(day);\n  }\n\n  // Representation is either 'time' or 'complete'\n  if (representation !== 'date') {\n    // Add the timezone.\n    var offset = originalDate.getTimezoneOffset();\n    if (offset !== 0) {\n      var absoluteOffset = Math.abs(offset);\n      var hourOffset = addLeadingZeros(Math.floor(absoluteOffset / 60), 2);\n      var minuteOffset = addLeadingZeros(absoluteOffset % 60, 2);\n      // If less than 0, the sign is +, because it is ahead of time.\n      var sign = offset < 0 ? '+' : '-';\n      tzOffset = \"\".concat(sign).concat(hourOffset, \":\").concat(minuteOffset);\n    } else {\n      tzOffset = 'Z';\n    }\n    var hour = addLeadingZeros(originalDate.getHours(), 2);\n    var minute = addLeadingZeros(originalDate.getMinutes(), 2);\n    var second = addLeadingZeros(originalDate.getSeconds(), 2);\n\n    // If there's also date, separate it with time with 'T'\n    var separator = result === '' ? '' : 'T';\n\n    // Creates a time string consisting of hour, minute, and second, separated by delimiters, if defined.\n    var time = [hour, minute, second].join(timeDelimiter);\n\n    // HHmmss or HH:mm:ss.\n    result = \"\".concat(result).concat(separator).concat(time).concat(tzOffset);\n  }\n  return result;\n}"],"names":["formatISO","date","options","_options$format","_options$representati","requiredArgs","originalDate","toDate","format","representation","result","tzOffset","dateDelimiter","timeDelimiter","day","addLeadingZeros","month","year","offset","absoluteOffset","hourOffset","minuteOffset","sign","hour","minute","second","separator","time"],"mappings":"yEAyCe,SAASA,EAAUC,EAAMC,EAAS,CAC/C,IAAIC,EAAiBC,EACrBC,EAAa,EAAG,SAAS,EACzB,IAAIC,EAAeC,EAAON,CAAI,EAC9B,GAAI,MAAMK,EAAa,QAAO,CAAE,EAC9B,MAAM,IAAI,WAAW,oBAAoB,EAE3C,IAAIE,EAAS,QAAQL,EAAkBD,GAAY,KAA6B,OAASA,EAAQ,UAAY,MAAQC,IAAoB,OAASA,EAAkB,UAAU,EAC1KM,EAAiB,QAAQL,EAAwBF,GAAY,KAA6B,OAASA,EAAQ,kBAAoB,MAAQE,IAA0B,OAASA,EAAwB,UAAU,EAChN,GAAII,IAAW,YAAcA,IAAW,QACtC,MAAM,IAAI,WAAW,sCAAsC,EAE7D,GAAIC,IAAmB,QAAUA,IAAmB,QAAUA,IAAmB,WAC/E,MAAM,IAAI,WAAW,sDAAsD,EAE7E,IAAIC,EAAS,GACTC,EAAW,GACXC,EAAgBJ,IAAW,WAAa,IAAM,GAC9CK,EAAgBL,IAAW,WAAa,IAAM,GAGlD,GAAIC,IAAmB,OAAQ,CAC7B,IAAIK,EAAMC,EAAgBT,EAAa,QAAS,EAAE,CAAC,EAC/CU,EAAQD,EAAgBT,EAAa,SAAQ,EAAK,EAAG,CAAC,EACtDW,EAAOF,EAAgBT,EAAa,YAAa,EAAE,CAAC,EAGxDI,EAAS,GAAG,OAAOO,CAAI,EAAE,OAAOL,CAAa,EAAE,OAAOI,CAAK,EAAE,OAAOJ,CAAa,EAAE,OAAOE,CAAG,CAC9F,CAGD,GAAIL,IAAmB,OAAQ,CAE7B,IAAIS,EAASZ,EAAa,oBAC1B,GAAIY,IAAW,EAAG,CAChB,IAAIC,EAAiB,KAAK,IAAID,CAAM,EAChCE,EAAaL,EAAgB,KAAK,MAAMI,EAAiB,EAAE,EAAG,CAAC,EAC/DE,EAAeN,EAAgBI,EAAiB,GAAI,CAAC,EAErDG,EAAOJ,EAAS,EAAI,IAAM,IAC9BP,EAAW,GAAG,OAAOW,CAAI,EAAE,OAAOF,EAAY,GAAG,EAAE,OAAOC,CAAY,CAC5E,MACMV,EAAW,IAEb,IAAIY,EAAOR,EAAgBT,EAAa,SAAU,EAAE,CAAC,EACjDkB,EAAST,EAAgBT,EAAa,WAAY,EAAE,CAAC,EACrDmB,EAASV,EAAgBT,EAAa,WAAY,EAAE,CAAC,EAGrDoB,EAAYhB,IAAW,GAAK,GAAK,IAGjCiB,EAAO,CAACJ,EAAMC,EAAQC,CAAM,EAAE,KAAKZ,CAAa,EAGpDH,EAAS,GAAG,OAAOA,CAAM,EAAE,OAAOgB,CAAS,EAAE,OAAOC,CAAI,EAAE,OAAOhB,CAAQ,CAC1E,CACD,OAAOD,CACT","x_google_ignoreList":[0]}