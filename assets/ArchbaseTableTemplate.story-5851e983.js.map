{"version":3,"file":"ArchbaseTableTemplate.story-5851e983.js","sources":["../../src/components/hooks/useArchbaseElementSizeArea.ts","../../src/components/datatable/ArchbaseItemRender.tsx","../../src/components/template/ArchbaseTableTemplate.tsx"],"sourcesContent":["import { useCallback, useState } from 'react';\nimport { useEventListener, useIsomorphicLayoutEffect } from 'usehooks-ts';\n\ninterface Size {\n  width: number;\n  height: number;\n}\n\nfunction useArchbaseElementSizeArea<T extends HTMLElement = HTMLDivElement>(): [(node: T | null) => void, Size] {\n  // Mutable values like 'ref.current' aren't valid dependencies\n  // because mutating them doesn't re-render the component.\n  // Instead, we use a state as a ref to be reactive.\n  const [ref, setRef] = useState<T | null>(null);\n  const [size, setSize] = useState<Size>({\n    width: 0,\n    height: 0,\n  });\n\n  // Prevent too many rendering using useCallback\n  const handleSize = useCallback(() => {\n    setSize({\n      width: ref?.offsetWidth || 0,\n      height: ref?.offsetHeight || 0,\n    });\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [ref?.offsetHeight, ref?.offsetWidth]);\n\n  useEventListener('resize', handleSize);\n\n  useIsomorphicLayoutEffect(() => {\n    handleSize();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [ref?.offsetHeight, ref?.offsetWidth]);\n\n  return [setRef, size];\n}\n\nexport default useArchbaseElementSizeArea;\n","import { Badge, Box } from '@mantine/core'\nimport { t } from 'i18next'\nimport React from 'react'\n\nexport type ArchbaseItemRenderType = {\n  value: any\n  label: string\n  color: string\n}\n\nexport interface ArchbaseItemRenderProps {\n  currentValue: string | undefined\n  values: ArchbaseItemRenderType[]\n}\n\nexport function ArchbaseItemRender({ currentValue, values }: ArchbaseItemRenderProps) {\n  const index = values.findIndex((item) => item.value.toString() === currentValue)\n  if (index !== -1) {\n    return (\n      <Box>\n        <Badge color={values[index].color}>{t(values[index].label)}</Badge>\n      </Box>\n    )\n  }\n  return null\n}\n","import React, { Fragment, ReactNode, useRef, useState } from 'react'\nimport { IconBug, IconEdit, IconEye, IconTrash } from '@tabler/icons-react'\nimport { t } from 'i18next'\nimport { MRT_Row } from 'mantine-react-table'\nimport { Button, Flex, Paper, Variants } from '@mantine/core'\nimport type { ArchbaseDataSource } from '../datasource'\nimport {\n  ArchbaseQueryBuilder,\n  ArchbaseQueryFilter,\n  ArchbaseQueryFilterDelegator,\n  ArchbaseQueryFilterState,\n  FilterOptions,\n  getDefaultEmptyFilter\n} from '../querybuilder'\nimport { ArchbaseAlert } from '../notification'\nimport { ArchbaseDataTable, ToolBarActions } from '../datatable'\nimport '../../styles/template.scss'\nimport { useArchbaseElementSizeArea, useArchbaseTheme } from '../hooks'\nimport { IconPlus } from '@tabler/icons-react'\nimport { useArchbaseAppContext } from '../core'\n\n\nexport interface UserActionsOptions {\n  visible: boolean\n  labelAdd?: string\n  labelEdit?: string\n  labelRemove?: string\n  labelView?: string\n  allowRemove: boolean\n  onAddExecute?: () => void\n  onEditExecute?: () => void\n  onRemoveExecute?: () => void\n  onViewExecute?: () => void\n}\n\nexport interface UserRowActionsOptions<T extends Object> {\n  actions?: any\n  onAddRow?: (row: MRT_Row<T>) => void\n  onEditRow?: (row: MRT_Row<T>) => void\n  onRemoveRow?: (row: MRT_Row<T>) => void\n  onViewRow?: (row: MRT_Row<T>) => void\n}\n\nexport interface ArchbaseTableTemplateProps<T extends Object, ID> {\n  title: string\n  printTitle?: string\n  logoPrint?: string\n  variant?: Variants<'filled' | 'outline' | 'light' | 'white' | 'default' | 'subtle' | 'gradient'>\n  dataSource: ArchbaseDataSource<T, ID>\n  dataSourceEdition?: ArchbaseDataSource<T, ID> | undefined\n  filterType: 'none' | 'normal' | 'advanced'\n  filterOptions?: FilterOptions\n  filterPersistenceDelegator?: ArchbaseQueryFilterDelegator\n  pageSize?: number\n  columns: ReactNode\n  filterFields?: ReactNode | undefined\n  userActions?: UserActionsOptions\n  userRowActions?: UserRowActionsOptions<T>\n  innerRef?: React.RefObject<HTMLInputElement> | undefined\n  isLoading?: boolean\n  isError?: boolean\n  error?: string | undefined\n  clearError?: () => void\n  width?: number | string | undefined\n  height?: number | string | undefined\n  onSearchByFilter?: () => void\n  withBorder?: boolean;\n  enableTopToolbar?: boolean\n}\n\nexport function ArchbaseTableTemplate<T extends object, ID>({\n  title,\n  printTitle,\n  dataSource,\n  filterOptions,\n  pageSize,\n  columns,\n  filterFields,\n  logoPrint,\n  userActions,\n  userRowActions,\n  innerRef,\n  isLoading = false,\n  isError = false,\n  enableTopToolbar= true,\n  error = '',\n  clearError = () => {},\n  filterType = 'normal',\n  width = '100%',\n  height = '100%',\n  onSearchByFilter = () => {},\n  withBorder=true,\n  filterPersistenceDelegator,\n  variant\n}: ArchbaseTableTemplateProps<T, ID>) {\n  const appContext = useArchbaseAppContext();\n  const filterRef = useRef<any>()\n  const theme = useArchbaseTheme()\n  const [innerComponentRef, { width: containerWidth, height: containerHeight }] = useArchbaseElementSizeArea()\n  const [filterState, setFilterState] = useState<ArchbaseQueryFilterState>({\n    activeFilterIndex: -1,\n    expandedFilter: false\n  })\n\n  const buildRowActions = ({ row }): ReactNode | undefined => {\n    if (!userRowActions && !userRowActions!.actions) {\n      return\n    }\n    const Comp: any = userRowActions!.actions\n    return (\n      <Comp\n        onEditRow={userRowActions!.onEditRow}\n        onRemoveRow={userRowActions!.onRemoveRow}\n        onViewRow={userRowActions!.onViewRow}\n        row={row}\n        variant={variant??appContext.variant}\n      />\n    )\n  }\n\n  const handleFilterChanged = (filter: ArchbaseQueryFilter, activeFilterIndex: number) => {\n    setFilterState({ ...filterState, currentFilter: filter, activeFilterIndex })\n  }\n\n  const handleToggleExpandedFilter = (expanded: boolean) => {\n    setFilterState({ ...filterState, expandedFilter: expanded })\n  }\n\n  const handleSelectedFilter = (filter: ArchbaseQueryFilter, activeFilterIndex: number) => {\n    setFilterState({ ...filterState, currentFilter: filter, activeFilterIndex })\n  }\n\n  const getColor = (color: string) => {\n    return theme.colors[color][theme.colorScheme === 'dark' ? 5 : 7]\n  }\n\n  const buildFilter = () => {\n    return (\n      <ArchbaseQueryBuilder\n        id={filterOptions?.componentName!}\n        viewName={filterOptions?.viewName!}\n        apiVersion={filterOptions?.apiVersion!}\n        ref={filterRef}\n        variant={variant??appContext.variant}\n        expandedFilter={filterState.expandedFilter}\n        persistenceDelegator={filterPersistenceDelegator!}\n        currentFilter={filterState.currentFilter}\n        activeFilterIndex={filterState.activeFilterIndex}\n        onSelectedFilter={handleSelectedFilter}\n        onFilterChanged={handleFilterChanged}\n        onSearchByFilter={onSearchByFilter}\n        onToggleExpandedFilter={handleToggleExpandedFilter}\n        width={'560px'}\n        height=\"170px\"\n      >\n        {filterFields}\n      </ArchbaseQueryBuilder>\n    )\n  }\n\n  return (\n    <Paper withBorder={withBorder} ref={innerRef||innerComponentRef} style={{ overflow: 'none', height: '100%' }}>\n      {isError ? (\n        <ArchbaseAlert\n          autoClose={20000}\n          withCloseButton={true}\n          withBorder={true}\n          icon={<IconBug size=\"1.4rem\" />}\n          title={t('archbase:WARNING')}\n          titleColor=\"rgb(250, 82, 82)\"\n          variant={variant??appContext.variant}\n          onClose={() => clearError && clearError()}\n        >\n          <span>{error}</span>\n        </ArchbaseAlert>\n      ) : null}\n      <ArchbaseDataTable<T, ID>\n        printTitle={printTitle || title}\n        logoPrint={logoPrint}\n        width={containerWidth}\n        height={containerHeight}\n        withBorder={withBorder}\n        dataSource={dataSource}\n        withColumnBorders={true}\n        variant={variant??appContext.variant}\n        striped={true}\n        isLoading={isLoading}\n        enableTopToolbar={enableTopToolbar}\n        pageSize={pageSize}\n        isError={isError}\n        enableGlobalFilter={filterType === 'normal'}\n        renderToolbarInternalActions={filterType === 'advanced' ? buildFilter : undefined}\n        renderRowActions={buildRowActions}\n        error={<span>{error}</span>}\n      >\n        {columns}\n        {userActions?.visible?<ToolBarActions>\n          <Fragment>\n            <h3 className=\"only-print\">{printTitle || title}</h3>\n            <div className=\"no-print\">\n              <Flex gap=\"8px\" rowGap=\"8px\">\n                {userActions.onAddExecute?<Button\n                  color={\"green\"}\n                  variant={variant??appContext.variant}\n                  leftIcon={<IconPlus />}\n                  onClick={() => userActions && userActions.onAddExecute && userActions!.onAddExecute()}\n                >\n                  {t('archbase:New')}\n                </Button>:null}\n                {userActions.onEditExecute?<Button\n                  color=\"blue\"\n                  leftIcon={<IconEdit/>}\n                  disabled={!dataSource.isBrowsing() || dataSource.isEmpty()}\n                  variant={variant??appContext.variant}\n                  onClick={() => userActions && userActions.onEditExecute && userActions!.onEditExecute()}\n                >\n                  {t('archbase:Edit')}\n                </Button>:null}\n                {userActions.onRemoveExecute?<Button\n                  color=\"red\"\n                  leftIcon={<IconTrash/>}\n                  disabled={!userActions?.allowRemove || !dataSource.isBrowsing() || dataSource.isEmpty()}\n                  variant={variant??appContext.variant}\n                  onClick={() => userActions && userActions.onRemoveExecute && userActions!.onRemoveExecute()}\n                >\n                  {t('archbase:Remove')}\n                </Button>:null}\n                {userActions.onViewExecute?<Button\n                  color=\"silver\"\n                  leftIcon={<IconEye/>}\n                  disabled={!dataSource.isBrowsing() || dataSource.isEmpty()}\n                  variant={variant??appContext.variant}\n                  onClick={() => userActions && userActions.onViewExecute && userActions!.onViewExecute()}\n                >\n                  {t('archbase:View')}\n                </Button>:null}\n              </Flex>\n            </div>\n          </Fragment>\n        </ToolBarActions>:null}\n      </ArchbaseDataTable>\n    </Paper>\n  )\n}\n"],"names":["useArchbaseElementSizeArea","ref","setRef","useState","size","setSize","handleSize","useCallback","useEventListener","useIsomorphicLayoutEffect","ArchbaseItemRender","currentValue","values","index","item","jsx","Box","Badge","t","ArchbaseTableTemplate","title","printTitle","dataSource","filterOptions","pageSize","columns","filterFields","logoPrint","userActions","userRowActions","innerRef","isLoading","isError","enableTopToolbar","error","clearError","filterType","width","height","onSearchByFilter","withBorder","filterPersistenceDelegator","variant","appContext","useArchbaseAppContext","filterRef","useRef","useArchbaseTheme","innerComponentRef","containerWidth","containerHeight","filterState","setFilterState","buildRowActions","row","Comp","handleFilterChanged","filter","activeFilterIndex","handleToggleExpandedFilter","expanded","handleSelectedFilter","buildFilter","ArchbaseQueryBuilder","jsxs","Paper","ArchbaseAlert","IconBug","ArchbaseDataTable","ToolBarActions","Fragment","Flex","Button","IconPlus","IconEdit","IconTrash","IconEye"],"mappings":"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"}