{"version":3,"file":"ArchbaseLocalFilterDataSource-dc5c2882.js","sources":["../../src/components/hooks/useArchbaseLocalFilterDataSource.ts","../../src/components/datasource/ArchbaseLocalFilterDataSource.ts"],"sourcesContent":["import { useEffect, useState } from 'react'\nimport { ArchbaseDataSource, DataSourceOptions, IDataSourceValidator } from '../datasource/ArchbaseDataSource'\nimport {\n  ArchbaseLocalFilterDataSource,\n  LocalFilter\n} from '../datasource/ArchbaseLocalFilterDataSource'\n\nexport type UseArchbaseLocalFilterDataSourceProps = {\n  initialData: LocalFilter[]\n  initialDataSource?: ArchbaseLocalFilterDataSource | undefined\n  name: string\n  onLoadComplete?: (dataSource: ArchbaseDataSource<LocalFilter, number>) => void\n  validator?: IDataSourceValidator\n}\n\nexport type UseArchbaseLocalFilterDataSourceReturnType = {\n  dataSource?: ArchbaseLocalFilterDataSource\n}\n\nexport const useArchbaseLocalFilterDataSource = (\n  props: UseArchbaseLocalFilterDataSourceProps\n): UseArchbaseLocalFilterDataSourceReturnType => {\n  const { initialData, name, initialDataSource, onLoadComplete, validator } = props\n  const [dataSource, setDataSource] = useState<ArchbaseLocalFilterDataSource>(\n    initialDataSource ??\n      new ArchbaseLocalFilterDataSource(name, {\n        records: initialData,\n        grandTotalRecords: initialData.length,\n        currentPage: 0,\n        totalPages: 0,\n        pageSize: 0,\n        validator\n      })\n  )\n\n  useEffect(() => {\n    setDataSource((prevDataSource) => {\n      const dsOptions: DataSourceOptions<LocalFilter> = {\n        records: initialData,\n        grandTotalRecords: initialData.length,\n        totalPages: 0,\n        currentPage: 0,\n        pageSize: 0,\n        validator\n      }\n      if (prevDataSource.isActive()) {\n        prevDataSource.setData(dsOptions)\n      } else {\n        prevDataSource.open(dsOptions)\n      }\n      return prevDataSource\n    })\n    if (onLoadComplete) {\n      onLoadComplete(dataSource)\n    }\n  }, [initialData, name])\n\n  return { dataSource }\n}\n","import { ArchbaseDataSource, DataSourceOptions } from './ArchbaseDataSource'\nimport {\n  ArchbaseQueryFilterDelegator,\n  DelegatorCallback,\n  IQueryFilterEntity,\n  QueryFilterEntity\n} from '../querybuilder'\n\nexport class LocalFilter {\n  id?: any\n\n  companyId?: any\n\n  filter?: string\n\n  name?: string\n\n  viewName?: string\n\n  componentName?: string\n\n  userName?: string\n\n  shared?: boolean\n\n  code?: string\n\n  constructor(data: Partial<LocalFilter> = {}) {\n    Object.assign(this, data)\n  }\n}\n\nexport class ArchbaseLocalFilterDataSource\n  extends ArchbaseDataSource<LocalFilter, number>\n  implements ArchbaseQueryFilterDelegator\n{\n  public getFilterById(id: any): IQueryFilterEntity | undefined {\n    if (this.locate({ id })) {\n      return this.convertCurrentRecordToFilter()\n    }\n  }\n\n  protected convertCurrentRecordToFilter(): IQueryFilterEntity | undefined {\n    return QueryFilterEntity.createInstanceWithValues({\n      id: this.getFieldValue('id'),\n      name: this.getFieldValue('name'),\n      code: this.getFieldValue('code'),\n      companyId: this.getFieldValue('companyId'),\n      viewName: this.getFieldValue('viewName'),\n      componentName: this.getFieldValue('componentName'),\n      userName: this.getFieldValue('userName'),\n      shared: this.getFieldValue('shared'),\n      filter: atob(this.getFieldValue('filter'))\n    })\n  }\n\n  public async addNewFilter(filter: IQueryFilterEntity, onResult: DelegatorCallback) {\n    this.insert(\n      new LocalFilter({\n        id: filter.id,\n        code: filter.code,\n        name: filter.name,\n        companyId: filter.companyId,\n        componentName: filter.componentName,\n        filter: btoa(JSON.stringify(filter.filter)),\n        shared: filter.shared,\n        viewName: filter.viewName,\n        userName: filter.userName\n      })\n    )\n    const result = await this.save()\n    onResult(null, result.id)\n  }\n\n  public async saveFilter(filter: IQueryFilterEntity, onResult: DelegatorCallback) {\n    if (this.locate({ id: filter.id })) {\n      this.edit()\n      this.setFieldValue('filter', btoa(JSON.stringify(filter.filter)))\n      const result = await this.save()\n      onResult(null, result.id)\n    } else {\n      onResult('Filtro não encontrado.')\n    }\n  }\n\n  public async removeFilterBy(filter: IQueryFilterEntity, onResult: DelegatorCallback) {\n    if (this.locate({ id: filter.id })) {\n      await this.remove()\n      onResult(null, filter.id)\n    } else {\n      onResult('Filtro não encontrado.')\n    }\n  }\n\n  public getFirstFilter(): IQueryFilterEntity | undefined {\n    if (this.getTotalRecords() > 0) {\n      this.first()\n      return this.convertCurrentRecordToFilter()\n    }\n  }\n\n  public getFilters(): IQueryFilterEntity[] {\n    if (this.getTotalRecords() > 0) {\n      return this.browseRecords().map((filter: LocalFilter) =>\n        QueryFilterEntity.createInstanceWithValues({\n          id: filter.id,\n          name: filter.name,\n          code: filter.code,\n          companyId: filter.companyId,\n          viewName: filter.viewName,\n          componentName: filter.componentName,\n          userName: filter.userName,\n          shared: filter.shared,\n          filter: atob(filter.filter || '')\n        })\n      )\n    }\n    return []\n  }\n}\n"],"names":["useArchbaseLocalFilterDataSource","props","initialData","name","initialDataSource","onLoadComplete","validator","dataSource","setDataSource","useState","ArchbaseLocalFilterDataSource","useEffect","prevDataSource","dsOptions","LocalFilter","data","ArchbaseDataSource","id","QueryFilterEntity","filter","onResult","result"],"mappings":"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"}