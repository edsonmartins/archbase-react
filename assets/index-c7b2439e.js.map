{"version":3,"file":"index-c7b2439e.js","sources":["../../src/components/hooks/useArchbaseBool.ts","../../src/components/debug/jsonview/ArchbaseJsonViewDataTypeDetection.ts","../../src/components/debug/jsonview/ArchbaseJsonViewDataRenderer.tsx","../../src/components/debug/jsonview/index.tsx"],"sourcesContent":["import { useState } from 'react'\n\nexport function useArchbaseBool(\n  initialValueCreator: () => boolean\n): [boolean, () => void, (value: boolean) => void] {\n  const [value, setValue] = useState(initialValueCreator())\n\n  const tooggle = () => setValue((currentValue) => !currentValue)\n\n  return [value, tooggle, setValue]\n}\n","export const isBoolean = (data: any) => {\n  return typeof data === 'boolean' || data instanceof Boolean\n}\n\nexport const isNumber = (data: any) => {\n  return typeof data === 'number' || data instanceof Number\n}\n\nexport const isBigInt = (data: any) => {\n  return typeof data === 'bigint' || data instanceof BigInt\n}\n\nexport const isString = (data: any) => {\n  return typeof data === 'string' || data instanceof String\n}\n\nexport const isArray = (data: any) => {\n  return Array.isArray(data)\n}\n\nexport const isObject = (data: any) => {\n  return data instanceof Object && data !== null\n}\n\nexport const isNull = (data: any) => {\n  return data === null\n}\n\nexport const isUndefined = (data: any) => {\n  return data === undefined\n}\n","import * as React from 'react';\nimport * as DataTypeDetection from './ArchbaseJsonViewDataTypeDetection';\nimport { useArchbaseBool } from '@hooks/useArchbaseBool';\n\nconst expandedIcon = '\\u25BE';\nconst collapsedIcon = '\\u25B8';\n\nexport interface StyleProps {\n  container: string;\n  basicChildStyle: string;\n  expander: string;\n  label: string;\n  nullValue: string;\n  undefinedValue: string;\n  numberValue: string;\n  stringValue: string;\n  booleanValue: string;\n  otherValue: string;\n  punctuation: string;\n  pointer: string;\n}\n\nexport interface JsonRenderProps<T> {\n  field?: string;\n  value: T;\n  lastElement: boolean;\n  level: number;\n  style: StyleProps;\n  shouldInitiallyExpand: (level: number, value: any, field?: string) => boolean;\n}\n\nexport interface ExpandableRenderProps {\n  field?: string;\n  value: Array<any> | object;\n  data: Array<[string | undefined, any]>;\n  openBracket: string;\n  closeBracket: string;\n  lastElement: boolean;\n  level: number;\n  style: StyleProps;\n  shouldInitiallyExpand: (level: number, value: any, field?: string) => boolean;\n}\n\nfunction combineStyles(style1: string, style2: string): string {\n  return `${style1 || ''} ${style2 || ''}`;\n}\n\nfunction renderExpandableObject({\n  field,\n  value,\n  data,\n  lastElement,\n  openBracket,\n  closeBracket,\n  level,\n  style,\n  shouldInitiallyExpand,\n}: ExpandableRenderProps) {\n  const shouldInitiallyExpandCalledRef = React.useRef(false);\n  const [expanded, toggleExpanded, setExpanded] = useArchbaseBool(() => shouldInitiallyExpand(level, value, field));\n\n  React.useEffect(() => {\n    if (!shouldInitiallyExpandCalledRef.current) {\n      shouldInitiallyExpandCalledRef.current = true;\n    } else {\n      setExpanded(shouldInitiallyExpand(level, value, field));\n    }\n  }, [shouldInitiallyExpand]);\n\n  const expandIcon = expanded ? expandedIcon : collapsedIcon;\n  const childLevel = level + 1;\n  const lastIndex = data.length - 1;\n\n  const onKeyDown = (e: React.KeyboardEvent<HTMLSpanElement>) => {\n    if (e.key === ' ') {\n      toggleExpanded();\n    }\n  };\n\n  return (\n    <div className={style.basicChildStyle} role=\"list\">\n      <span\n        className={combineStyles(style.expander, style.pointer)}\n        role=\"button\"\n        onClick={toggleExpanded}\n        onKeyDown={onKeyDown}\n        tabIndex={0}\n      >\n        {expandIcon}\n      </span>\n      {field && <span className={style.label}>{field}:</span>}\n      <span className={style.punctuation}>{openBracket}</span>\n\n      {expanded ? (\n        <div>\n          {data.map((dataElement, index) => (\n            <ArchbaseJsonViewDataRender\n              key={dataElement[0] || index}\n              field={dataElement[0]}\n              value={dataElement[1]}\n              style={style}\n              lastElement={index === lastIndex}\n              level={childLevel}\n              shouldInitiallyExpand={shouldInitiallyExpand}\n            />\n          ))}\n        </div>\n      ) : (\n        <span\n          className={combineStyles(style.punctuation, style.pointer)}\n          role=\"button\"\n          tabIndex={0}\n          onClick={toggleExpanded}\n          onKeyDown={onKeyDown}\n        >\n          ...\n        </span>\n      )}\n\n      <span className={style.punctuation}>{closeBracket}</span>\n      {!lastElement && <span className={style.punctuation}>,</span>}\n    </div>\n  );\n}\n\nfunction JsonObject({ field, value, style, lastElement, shouldInitiallyExpand, level }: JsonRenderProps<Object>) {\n  return renderExpandableObject({\n    field,\n    value,\n    lastElement: lastElement || false,\n    level,\n    openBracket: '{',\n    closeBracket: '}',\n    style,\n    shouldInitiallyExpand,\n    data: Object.keys(value).map((key) => [key, value[key]]),\n  });\n}\n\nfunction JsonArray({ field, value, style, lastElement, level, shouldInitiallyExpand }: JsonRenderProps<Array<any>>) {\n  return renderExpandableObject({\n    field,\n    value,\n    lastElement: lastElement || false,\n    level,\n    openBracket: '[',\n    closeBracket: ']',\n    style,\n    shouldInitiallyExpand,\n    data: value.map((element) => [undefined, element]),\n  });\n}\n\nfunction JsonPrimitiveValue({\n  field,\n  value,\n  style,\n  lastElement,\n}: JsonRenderProps<string | number | boolean | null | undefined>) {\n  let stringValue = value;\n  let valueStyle = style.otherValue;\n\n  if (value === null) {\n    stringValue = 'null';\n    valueStyle = style.nullValue;\n  } else if (value === undefined) {\n    stringValue = 'undefined';\n    valueStyle = style.undefinedValue;\n  } else if (DataTypeDetection.isString(value)) {\n    stringValue = `\"${value}\"`;\n    valueStyle = style.stringValue;\n  } else if (DataTypeDetection.isBoolean(value)) {\n    stringValue = value ? 'true' : 'false';\n    valueStyle = style.booleanValue;\n  } else if (DataTypeDetection.isNumber(value)) {\n    stringValue = value.toString();\n    valueStyle = style.numberValue;\n  } else if (DataTypeDetection.isBigInt(value)) {\n    stringValue = `${value.toString()}n`;\n    valueStyle = style.numberValue;\n  } else {\n    stringValue = value.toString();\n  }\n\n  return (\n    <div className={style.basicChildStyle} role=\"listitem\">\n      {field && <span className={style.label}>{field}:</span>}\n      <span className={valueStyle}>{stringValue}</span>\n      {!lastElement && <span className={style.punctuation}>,</span>}\n    </div>\n  );\n}\n\nexport default function ArchbaseJsonViewDataRender(props: JsonRenderProps<any>) {\n  const value = props.value;\n  if (DataTypeDetection.isArray(value)) {\n    return <JsonArray {...props} />;\n  }\n\n  if (DataTypeDetection.isObject(value)) {\n    return <JsonObject {...props} />;\n  }\n\n  return <JsonPrimitiveValue {...props} />;\n}\n","import * as React from 'react'\nimport ArchbaseJsonViewDataRender, { StyleProps } from './ArchbaseJsonViewDataRenderer'\nimport styles from './styles.module.css'\n\nexport interface ArchbaseJsonViewProps {\n  data: Object | Array<any>\n  style?: StyleProps\n  shouldInitiallyExpand?: (level: number, value: any, field?: string) => boolean\n}\n\nexport const defaultStyles: StyleProps = {\n  container: styles['container-light'],\n  basicChildStyle: styles['basic-element-style'],\n  label: styles['label-light'],\n  nullValue: styles['value-null-light'],\n  undefinedValue: styles['value-undefined-light'],\n  stringValue: styles['value-string-light'],\n  booleanValue: styles['value-boolean-light'],\n  numberValue: styles['value-number-light'],\n  otherValue: styles['value-other-light'],\n  expander: styles['expander-light'],\n  punctuation: styles['punctuation-light'],\n  pointer: styles.pointer\n}\n\nexport const darkStyles: StyleProps = {\n  container: styles['container-dark'],\n  basicChildStyle: styles['basic-element-style'],\n  label: styles['label-dark'],\n  nullValue: styles['value-null-dark'],\n  undefinedValue: styles['value-undefined-dark'],\n  stringValue: styles['value-string-dark'],\n  booleanValue: styles['value-boolean-dark'],\n  numberValue: styles['value-number-dark'],\n  otherValue: styles['value-other-dark'],\n  expander: styles['expander-dark'],\n  punctuation: styles['punctuation-dark'],\n  pointer: styles.pointer\n}\n\nexport const allExpanded = () => true\nexport const collapseAllNested = (level: number) => level < 1\n\nexport const ArchbaseJsonView = ({\n  data,\n  style = defaultStyles,\n  shouldInitiallyExpand = allExpanded\n}: ArchbaseJsonViewProps) => {\n  return (\n    <div className={style.container}>\n      <ArchbaseJsonViewDataRender\n        value={data}\n        style={style}\n        lastElement\n        level={0}\n        shouldInitiallyExpand={shouldInitiallyExpand}\n      />\n    </div>\n  )\n}\n"],"names":["useArchbaseBool","initialValueCreator","value","setValue","useState","currentValue","isBoolean","data","isNumber","isBigInt","isString","isArray","isObject","expandedIcon","collapsedIcon","combineStyles","style1","style2","renderExpandableObject","field","lastElement","openBracket","closeBracket","level","style","shouldInitiallyExpand","shouldInitiallyExpandCalledRef","React.useRef","expanded","toggleExpanded","setExpanded","React.useEffect","expandIcon","childLevel","lastIndex","onKeyDown","e","jsxs","jsx","dataElement","index","ArchbaseJsonViewDataRender","JsonObject","key","JsonArray","element","JsonPrimitiveValue","stringValue","valueStyle","DataTypeDetection.isString","DataTypeDetection.isBoolean","DataTypeDetection.isNumber","DataTypeDetection.isBigInt","props","DataTypeDetection.isArray","DataTypeDetection.isObject","defaultStyles","styles","darkStyles","allExpanded","collapseAllNested","ArchbaseJsonView"],"mappings":"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"}