{"version":3,"file":"ArchbaseJsonPathPicker-492781ec.js","sources":["../../node_modules/@tabler/icons-react/dist/esm/icons/IconArrowBigRightFilled.js","../../src/components/debug/jsonpathpicker/ArchbaseJsonPathPicker.tsx"],"sourcesContent":["/**\n * @tabler/icons-react v2.38.0 - MIT\n */\n\nimport createReactComponent from '../createReactComponent.js';\n\nvar IconArrowBigRightFilled = createReactComponent(\n  \"arrow-big-right-filled\",\n  \"IconArrowBigRightFilled\",\n  [\n    [\n      \"path\",\n      {\n        d: \"M12.089 3.634a2 2 0 0 0 -1.089 1.78l-.001 2.586h-6.999a2 2 0 0 0 -2 2v4l.005 .15a2 2 0 0 0 1.995 1.85l6.999 -.001l.001 2.587a2 2 0 0 0 3.414 1.414l6.586 -6.586a2 2 0 0 0 0 -2.828l-6.586 -6.586a2 2 0 0 0 -2.18 -.434l-.145 .068z\",\n        fill: \"currentColor\",\n        key: \"svg-0\",\n        strokeWidth: \"0\"\n      }\n    ]\n  ]\n);\n\nexport { IconArrowBigRightFilled as default };\n//# sourceMappingURL=IconArrowBigRightFilled.js.map\n","import React, { Component } from 'react'\nimport './ArchbaseJsonPathPicker.css'\nimport { IconArrowBigRightFilled } from '@tabler/icons-react'\nimport { t } from 'i18next'\n\nexport interface ArchbaseJsonPathPickerOptions {\n  outputCollapsed: boolean\n  outputWithQuotes: boolean\n  pathNotation: string\n  pathQuotesType: string\n  processKeys: boolean\n  keyReplaceRegexPattern: string | undefined\n  keyReplaceRegexFlags: string | undefined\n  keyReplacementText: string\n  pickerIcon: string\n  withoutPicker: boolean\n}\n\nconst defaultOptions: ArchbaseJsonPathPickerOptions = {\n  outputCollapsed: false,\n  outputWithQuotes: false,\n  pathNotation: 'dots',\n  pathQuotesType: 'single',\n  processKeys: false,\n  keyReplaceRegexPattern: undefined,\n  keyReplaceRegexFlags: undefined,\n  keyReplacementText: '',\n  pickerIcon: '#x1f4cb',\n  withoutPicker: false\n}\n\nexport interface ArchbaseJsonPathPickerProps {\n  data: any\n  onSelect: (path: string) => void\n  options?: ArchbaseJsonPathPickerOptions\n}\n\nfunction siblings(el, sel, callback) {\n  var sibs: any[] = []\n\n  for (var i = 0; i < el.parentNode.children.length; i += 1) {\n    var child = el.parentNode.children[i]\n\n    if (child !== el && typeof sel === 'string' && child.matches(sel)) {\n      sibs.push(child)\n    }\n  }\n  if (callback && typeof callback === 'function') {\n    for (var _i = 0; _i < sibs.length; _i += 1) {\n      callback(sibs[_i])\n    }\n  }\n\n  return sibs\n}\nfunction fireClick(node) {\n  var doc\n  if (node.ownerDocument) {\n    doc = node.ownerDocument\n  } else if (node.nodeType === 9) {\n    doc = node\n  } else {\n    throw new Error('Invalid node passed to fireEvent: '.concat(node.id))\n  }\n\n  if (node.dispatchEvent) {\n    var eventClass = 'MouseEvents'\n    var event = doc.createEvent(eventClass)\n    event.initEvent('click', true, true)\n\n    event.synthetic = true\n    node.dispatchEvent(event, true)\n  } else if (node.fireEvent) {\n    var _event = doc.createEventObject()\n    _event.synthetic = true\n    node.fireEvent('onclick', _event)\n  }\n}\n\nfunction isHidden(elem) {\n  var width = elem.offsetWidth\n  var height = elem.offsetHeight\n  return (width === 0 && height === 0) || window.getComputedStyle(elem).display === 'none'\n}\n\nfunction getParents(elem, sel) {\n  var result: any[] = []\n\n  for (var p = elem && elem.parentElement; p; p = p.parentElement) {\n    if (typeof sel === 'string' && p.matches(sel)) {\n      result.push(p)\n    }\n  }\n\n  return result\n}\n\nfunction isCollapsable(arg) {\n  return arg instanceof Object && Object.keys(arg).length > 0\n}\n\nfunction isUrl(string) {\n  var regexp = /^(ftp|http|https):\\/\\/(\\w+:{0,1}\\w*@)?(\\S+)(:[0-9]+)?(\\/|\\/([\\w#:.?+=&%@!\\-/]))?/\n  return regexp.test(string)\n}\n\nexport class ArchbaseJsonPathPicker extends Component<ArchbaseJsonPathPickerProps> {\n  static defaultProps = {\n    options: defaultOptions\n  }\n  private pickerRef: any\n  private destRef: any\n  private jsonPathPickerInstance: any\n  constructor(props: ArchbaseJsonPathPickerProps) {\n    super(props)\n    this.pickerRef = React.createRef()\n  }\n\n  json2jsx = (json, options) => {\n    if (typeof json === 'string') {\n      const tmp = json.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;')\n      if (isUrl(tmp)) {\n        return (\n          <a href={tmp} className=\"json-string\">\n            {tmp}\n          </a>\n        )\n      } else {\n        return <span className=\"json-string\">\"{tmp}\"</span>\n      }\n    } else if (typeof json === 'number') {\n      return <span className=\"json-literal\">{json}</span>\n    } else if (typeof json === 'boolean') {\n      return <span className=\"json-literal\">{json}</span>\n    } else if (json === null) {\n      return <span className=\"json-literal\">null</span>\n    } else if (Array.isArray(json)) {\n      if (json.length > 0) {\n        return (\n          <span>\n            [\n            <ol className=\"json-array\">\n              {json.map((item, index) => (\n                <li key={index} data-key-type=\"array\" data-key={index}>\n                  {isCollapsable(item) && <a href=\"\" className=\"json-toggle\"></a>}\n                  {this.json2jsx(item, options)}\n                  {index < json.length - 1 && ','}\n                </li>\n              ))}\n            </ol>\n            ]\n          </span>\n        )\n      } else {\n        return '[]'\n      }\n    } else if (typeof json === 'object') {\n      const keys = Object.keys(json)\n\n      if (keys.length > 0) {\n        return (\n          <span>\n            {'{'}\n            <ul className=\"json-dict\">\n              {keys.map((key, index) => (\n                <li key={key} data-key-type=\"object\" data-key={key}>\n                  {isCollapsable(json[key]) ? (\n                    <a href=\"\" className=\"json-toggle\">\n                      {options.outputWithQuotes ? (\n                        <span className=\"json-string\">\"{key}\"</span>\n                      ) : (\n                        key\n                      )}\n                    </a>\n                  ) : options.outputWithQuotes ? (\n                    <span className=\"json-string\">\"{key}\"</span>\n                  ) : (\n                    key\n                  )}\n                  <span className=\"pick-path\" title={`${t('archbase:Pick path')}`}>\n                    <IconArrowBigRightFilled size=\"1.0rem\"/>\n                  </span>\n                  : {this.json2jsx(json[key], options)}\n                  {index < keys.length - 1 && ','}\n                </li>\n              ))}\n            </ul>\n            {'}'}\n          </span>\n        )\n      } else {\n        return '{}'\n      }\n    }\n  }\n\n  handlerEventToggle = (elm, event) => {\n    elm.classList.toggle('collapsed')\n    var subTarget = siblings(elm, 'ul.json-dict, ol.json-array', function (el) {\n      el.style.display = el.style.display === '' || el.style.display === 'block' ? 'none' : 'block'\n    })\n\n    for (var i = 0; i < subTarget.length; i += 1) {\n      if (!isHidden(subTarget[i])) {\n        siblings(subTarget[i], '.json-placeholder', function (el) {\n          return el.parentNode.removeChild(el)\n        })\n      } else {\n        var childs = subTarget[i].children\n        var count = 0\n\n        for (var j = 0; j < childs.length; j += 1) {\n          if (childs[j].tagName === 'LI') {\n            count += 1\n          }\n        }\n        var placeholder = count + (count > 1 ? ' items' : ' item')\n        subTarget[i].insertAdjacentHTML(\n          'afterend',\n          '<a href class=\"json-placeholder\">'.concat(placeholder, '</a>')\n        )\n      }\n    }\n    event.stopPropagation()\n    event.preventDefault()\n  }\n\n  toggleEventListener = (event) => {\n    var t = event.target\n\n    while (t && t !== this) {\n      if (typeof t.matches == 'function') {\n        if (t.matches('a.json-toggle')) {\n          this.handlerEventToggle.call(null, t, event)\n          event.stopPropagation()\n          event.preventDefault()\n        }\n      }\n\n      t = t.parentNode\n    }\n  }\n\n  simulateClickHandler = (elm, event) => {\n    siblings(elm, 'a.json-toggle', function (el) {\n      return fireClick(el)\n    })\n    event.stopPropagation()\n    event.preventDefault()\n  }\n\n  simulateClickEventListener = (event) => {\n    var t = event.target\n\n    while (t && t !== this) {\n      if (typeof t.matches == 'function') {\n        if (t.matches('a.json-placeholder')) {\n          this.simulateClickHandler.call(null, t, event)\n        }\n      }\n\n      t = t.parentNode\n    }\n  }\n\n  pickPathHandler = (elm) => {\n    var $parentsList = getParents(elm, 'li').reverse()\n    var pathSegments: any[] = []\n\n    for (var i = 0; i < $parentsList.length; i += 1) {\n      var key = $parentsList[i].dataset.key\n      var keyType = $parentsList[i].dataset.keyType\n\n      if (\n        keyType === 'object' &&\n        typeof key !== 'number' &&\n        this.props.options!.processKeys &&\n        this.props.options!.keyReplaceRegexPattern !== undefined\n      ) {\n        var keyReplaceRegex = new RegExp(\n          this.props.options!.keyReplaceRegexPattern,\n          this.props.options!.keyReplaceRegexFlags\n        )\n        var keyReplacementText =\n          this.props.options!.keyReplacementText === undefined\n            ? ''\n            : this.props.options!.keyReplacementText\n        key = key.replace(keyReplaceRegex, keyReplacementText)\n      }\n\n      pathSegments.push({\n        key: key,\n        keyType: keyType\n      })\n    }\n\n    var quotes = {\n      none: '',\n      single: \"'\",\n      double: '\"'\n    }\n    var quote = quotes[this.props.options!.pathQuotesType]\n    pathSegments = pathSegments.map((segment, idx) => {\n      var isBracketsNotation = this.props.options!.pathNotation === 'brackets'\n      var isKeyForbiddenInDotNotation =\n        !/^\\w+$/.test(segment.key) || typeof segment.key === 'number'\n\n      if (segment.keyType === 'array' || segment.isKeyANumber) {\n        return '['.concat(segment.key, ']')\n      }\n\n      if (isBracketsNotation || isKeyForbiddenInDotNotation) {\n        return '['.concat(quote).concat(segment.key).concat(quote, ']')\n      }\n\n      if (idx > 0) {\n        return '.'.concat(segment.key)\n      }\n\n      return segment.key\n    })\n    var path = pathSegments.join('')\n\n    if (this.props.onSelect) {\n      this.props.onSelect(path)\n    }\n  }\n\n  pickEventListener = (event) => {\n    let t = event.target\n    while (t && t !== this) {\n      if (typeof t.matches == 'function') {\n        if (t.matches('.pick-path')) {\n          this.pickPathHandler.call(null, t)\n        }\n      }\n      t = t.parentNode\n    }\n  }\n\n  componentDidMount() {\n    this.pickerRef.current.addEventListener('click', this.toggleEventListener)\n    this.pickerRef.current.addEventListener('click', this.simulateClickEventListener)\n    this.pickerRef.current.addEventListener('click', this.pickEventListener)\n  }\n\n  render() {\n    return <div ref={this.pickerRef}>{this.json2jsx(this.props.data, {})}</div>\n  }\n}\n"],"names":["IconArrowBigRightFilled","createReactComponent","defaultOptions","siblings","el","sel","callback","sibs","i","child","_i","fireClick","node","doc","eventClass","event","_event","isHidden","elem","width","height","getParents","result","p","isCollapsable","arg","isUrl","string","regexp","ArchbaseJsonPathPicker","Component","props","json","options","tmp","jsx","jsxs","item","index","keys","key","t","elm","subTarget","childs","count","j","placeholder","t2","$parentsList","pathSegments","keyType","keyReplaceRegex","keyReplacementText","quotes","quote","segment","idx","isBracketsNotation","isKeyForbiddenInDotNotation","path","React"],"mappings":"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","x_google_ignoreList":[0]}